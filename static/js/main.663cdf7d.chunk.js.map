{"version":3,"sources":["Uploader.js","Results.js","App.js","reportWebVitals.js","index.js"],"names":["require","compress","decompress","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","margin","transition","activeStyle","acceptStyle","rejectStyle","Uploader","props","style","useState","contents","setContents","React","window","location","hash","setHash","hashChangeHandler","useCallback","useEffect","addEventListener","removeEventListener","updateHash","newHash","useHash","a","fileSetter","inUrl","computeUrl","decodeContents","check","className","message","fileDrop","useDropzone","onDrop","acceptedFiles","length","file","text","setter","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","useMemo","StyledDropzone","IGCParser","geolib","listStyle","containerStyle","alignSelf","height","Results","task","JSON","parse","tsk","igc","progress","setProgress","turnpointIndex","turnpoints","circles","positions","preStartPositions","startTime","sss","timeGates","started","i","fixes","fix","turnpoint","moment","time","push","latitude","longitude","getDistance","waypoint","radius","zIndex","description","center","lat","lon","Circle","pathOptions","fillColor","opacity","splice","initialTurn","Math","round","overflow","width","flexGrow","MapContainer","zoom","scrollWheelZoom","TileLayer","attribution","url","Polyline","type","min","max","class","id","value","onChange","event","percentage","target","App","setIgc","setTsk","igcUploader","xctskUploader","pageURL","URL","content","href","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.663cdf7d.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nconst { compress, decompress } = require('shrink-string')\n\nconst baseStyle = {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '20px',\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: '#eeeeee',\n    borderStyle: 'dashed',\n    backgroundColor: '#fafafa0F',\n    color: '#bdbdbd',\n    outline: 'none',\n    margin: 10,\n    transition: 'border .24s ease-in-out'\n};\n\nconst activeStyle = {\n    borderColor: '#2196f3'\n};\n\nconst acceptStyle = {\n    borderColor: '#00e676'\n};\n\nconst rejectStyle = {\n    borderColor: '#ff1744'\n};\n\nfunction StyledDropzone(props) {\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject,\n    } = useDropzone({\n        onDrop: async acceptedFiles => {\n            if (acceptedFiles.length > 0) {\n                const file = acceptedFiles[0];\n                const contents = await file.text();\n                props.setter(contents);\n            }\n        }\n    });\n\n    const style = useMemo(() => ({\n        ...baseStyle,\n        ...(isDragActive ? activeStyle : {}),\n        ...(isDragAccept ? acceptStyle : {}),\n        ...(isDragReject ? rejectStyle : {})\n    }), [\n        isDragActive,\n        isDragReject,\n        isDragAccept\n    ]);\n\n    return (\n        <div className=\"container\">\n            <div {...getRootProps({ style })}>\n                <input {...getInputProps()} />\n                <p>{props.message}</p>\n            </div>\n        </div>\n    );\n}\n\nconst useHash = () => {\n    const [hash, setHash] = React.useState(() => window.location.hash);\n  \n    const hashChangeHandler = React.useCallback(() => {\n      setHash(window.location.hash);\n    }, []);\n  \n    React.useEffect(() => {\n      window.addEventListener('hashchange', hashChangeHandler);\n      return () => {\n        window.removeEventListener('hashchange', hashChangeHandler);\n      };\n    }, []);\n  \n    const updateHash = React.useCallback(\n      newHash => {\n        if (newHash !== hash) window.location.hash = newHash;\n      },\n      [hash]\n    );\n  \n    return [hash, updateHash];\n  };\n\nfunction Uploader(props) {\n    const style = {\n        ...baseStyle,\n        color: \"green\",\n        borderColor: \"green\"\n    };\n\n    const [contents, setContents] = useState();\n    const [hash, setHash] = useHash();\n\n    // Sets a new URL when asked\n    useEffect(() => {\n        props.fileSetter(contents);\n\n        async function computeUrl() {\n            let newHash = \"\";\n            if(contents) {\n                newHash = await compress(contents)\n            }\n            setHash(newHash);\n        }\n        if (props.inUrl) {\n            computeUrl();\n        }\n    }, [contents, props])\n\n    // Loads the contents from a URL\n    useEffect(() => {\n        async function decodeContents(hash) {\n            setContents(await decompress(hash));\n        }\n        if (hash && props.inUrl) {\n            decodeContents(hash);\n        }\n    }, [hash])\n\n    const check = <div className=\"container\" style={style}>\n        <p>{props.message + ' \\u2713'}</p>\n    </div>\n\n    const fileDrop = StyledDropzone({\n        message: props.message,\n        setter: setContents\n    });\n\n    if (props.file)\n        return check;\n    return fileDrop;\n}\n\nexport { Uploader };","import { useState } from 'react';\nimport { MapContainer, TileLayer, Circle, Polyline } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css';\nimport moment from 'moment'\n\n\n\nconst IGCParser = require('igc-parser');\nconst geolib = require('geolib');\n\nconst listStyle = {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '2px',\n    margin: '2px',\n    borderColor: 'red',\n    color: 'red',\n    borderStyle: 'solid',\n}\n\nconst containerStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n    alignSelf: 'stretch',\n    height: '100vh',\n}\n\nfunction Results(props) {\n    let task = JSON.parse(props.tsk);\n    let igc = IGCParser.parse(props.igc);\n    const [progress, setProgress] = useState(1);\n\n    let turnpointIndex = 0;\n    let turnpoints = [];  // Turnpoints to show\n    let circles = []; // Circles to show on the map\n    let positions = [];\n    let preStartPositions = [];\n\n    // Calculate the starting time (assume SSS)\n    const startTime = task.sss.timeGates[0];\n\n    let started = false;\n    for( let i = 0; i < igc.fixes.length &&  i / igc.fixes.length < progress; i++) {\n        const fix = igc.fixes[i];\n        const turnpoint = task.turnpoints[turnpointIndex];\n\n        // We're before the start of the race.  Do not consider this.\n        if(!started && moment(\"1970-01-01 \" + fix.time + \"Z\") < moment(\"1970-01-01 \" + startTime)) {\n            preStartPositions.push([fix.latitude, fix.longitude]);\n            continue;\n        } else {\n            started = true;\n            positions.push([fix.latitude, fix.longitude]);\n        }\n\n        if (turnpoint == null) {\n            continue;\n        }\n        const distance = geolib.getDistance(fix, turnpoint.waypoint);\n        if (distance < turnpoint.radius) {\n            // We have hit a turnpoint, add it to a success list and move on\n            turnpoints.push(\n                <div key={\"turnpoint-\" + turnpointIndex} style={{\n                    ...listStyle,\n                    color: 'green',\n                    borderColor: 'green',\n                    zIndex: i\n                }}\n                >\n                    <small>{turnpoint.waypoint.description}</small>\n                </div>\n            );\n            let center = [turnpoint.waypoint.lat, turnpoint.waypoint.lon];\n            circles.push(<Circle center={center} pathOptions={{ fillColor: 'blue', color: 'transparent', opacity: 0.25 }} radius={turnpoint.radius} key={\"turnpoint-circle-\" + turnpointIndex} />);\n            turnpointIndex++;\n        }\n    }\n\n    // Complete filling in all the waypoints we didn't get.\n    for (let i = task.turnpoints.length - 1; i >= turnpointIndex; i--) {\n        // Show red for everything except for the next waypoint we're trying to hit\n        let color = \"gray\"\n        let fillColor = \"FFF\"\n        let opacity = 0.25\n        if(i === turnpointIndex) {\n            color = \"orange\"\n            fillColor = \"orange\"\n            opacity = 1\n        }\n\n        const turnpoint = task.turnpoints[i];\n        turnpoints.splice(turnpointIndex, 0, <div key={\"turnpoint-\" + i} style={{...listStyle, borderColor: color, zIndex: i}}>\n            <small>{turnpoint.waypoint.description}</small>\n        </div>);\n        let center = [turnpoint.waypoint.lat, turnpoint.waypoint.lon];\n\n        circles.push(<Circle center={center} pathOptions={{ color: color, fillColor: fillColor, opacity: opacity }} radius={turnpoint.radius} key={\"turnpoint-circle-\" + i} />)\n    };\n\n    const initialTurn = task.turnpoints[0];\n    const center = [initialTurn.waypoint.lat, initialTurn.waypoint.lon]\n    const time = igc.fixes[Math.round(igc.fixes.length * progress - 1)]?.time ?? \"Nan\";\n\n    return <div style={containerStyle}>\n        <div style={{ display: 'flex', flexDirection: 'column', overflow: 'auto' }}>\n            <h2>All turnpoints</h2>\n            {turnpoints}\n        </div>\n        <div className=\"rightHandContainer\" style={{ alignSelf: 'stretch', width: \"100%\", display: 'flex', flexDirection: 'column', height: \"100vh\" }}>\n            <div className=\"mapContainer\" style={{ flexGrow: 1, display: 'flex' }}>\n                <MapContainer center={center} zoom={13} scrollWheelZoom={false}>\n                <TileLayer\n        attribution='&copy; <a href=\"https://stadiamaps.com/\">Stadia Maps</a>, &copy; <a href=\"https://openmaptiles.org/\">OpenMapTiles</a> &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.jawg.io/jawg-terrain/{z}/{x}/{y}{r}.png?access-token=OCSVqPtVG4tEq4zlKGa0sA3LW6bC5l528PJhTuBSPZ5BPvbjemWIyzaHd15iYV11\"\n      />                    {circles}\n                    <Polyline positions={preStartPositions} color=\"gray\" />\n                    <Polyline positions={positions} />\n                </MapContainer>\n\n            </div>\n            <div className=\"flightProgress\" style={{ height: \"80px\", backgroundColor: \"blue\", display: 'flex' }}>\n                <input type=\"range\" min=\"1\" max=\"100\" class=\"slider\" id=\"myRange\" style={{ flexGrow: 1 }} value={progress * 100} onChange={(event) => {\n                    let percentage = event.target.value / 100;\n                    setProgress(percentage)\n                }} />\n                <p>{time}</p>\n            </div>\n        </div>\n    </div>\n}\n\nexport { Results }\n\n\n","import './App.css';\nimport { Uploader } from './Uploader.js';\nimport { useState } from 'react';\nimport { Results } from './Results.js';\n\n\nconst style = {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n}\n\nfunction App() {\n  // State for IGC and XCTSK uploads\n  const [igc, setIgc] = useState();\n  const [tsk, setTsk] = useState();\n\n  // Uploader views\n  const igcUploader = Uploader({\n    message: \"Upload igc file\",\n    file: igc,\n    fileSetter: setIgc,\n  });\n  const xctskUploader = Uploader({\n    message: \"Upload xctsk\",\n    file: tsk,\n    fileSetter: setTsk,\n    inUrl: true,\n  });\n\n  // Component for uploading the files\n  let pageURL = new URL(window.location);\n  pageURL.hash = \"\";\n  let content = <div style={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}>\n    <h1><a href={pageURL.toString()} style={{ color: 'white' }}>Paraglider Task Checker</a></h1>\n    <div style={style}>\n      {igcUploader}\n      {xctskUploader}\n    </div>\n  </div>;\n\n  // Component for showing the results given the files\n  if (tsk != null && igc != null) {\n    content = <Results tsk={tsk} igc={igc} />;\n  }\n\n\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {content}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}